# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: tvolex
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: aws-code-challenge-2025
service: aws-code-challenge-2025

provider:
  name: aws
  runtime: nodejs22.x
  region: eu-central-1
  memorySize: 256


  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
        - Fn::GetAtt: [taskProcessingQueue, Arn]

    - Effect: Allow
      Action:
         - sqs:ReceiveMessage
         - sqs:DeleteMessage
         - sqs:GetQueueAttributes
         - sqs:ChangeMessageVisibility
      Resource:
         - Fn::GetAtt: [taskProcessingQueue, Arn]

    - Effect: Allow
      Action:
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
      Resource:
        - Fn::GetAtt: [taskDLQQueue, Arn]


functions:
  TaskGatewayLambda:
    role: TaskGatewayRole
    handler: handler.taskGatewayHandler
    logs:
      logGroup: /aws/lambda/taskGatewayLogs
    environment:
      TASK_PROCESSING_QUEUE_URL:
        Fn::Sub: "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/task-processing.fifo"
    events:
      - httpApi:
          path: /api/v1/tasks
          method: POST

  TaskProcessingLambda:
    handler: handler.taskProcessingHandler
    role: TaskProcessingRole
    logs:
      logGroup: /aws/lambda/taskProcessingLogs
    environment:
      TASK_PROCESSING_QUEUE_URL:
        Fn::Sub: "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/task-processing.fifo"
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - taskProcessingQueue
              - Arn
          batchSize: 10
#    destinations:
#      onFailure:
#        type: sqs
#        arn:
#          Fn::GetAtt:
#            - taskDLQQueue
#            - Arn

  TaskDLQLambda:
    handler: handler.taskDlqHandler
    role: TaskDLQRole
    logs:
      logGroup: /aws/lambda/taskDLQLogs
    environment:
      TASK_DLQ_URL:
        Fn::Sub: "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/task-dlq.fifo"
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - taskDLQQueue
              - Arn
          batchSize: 5

resources:
  Resources:
    taskDLQQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: task-dlq.fifo
        FifoQueue: true

    taskProcessingQueue:
      Type: AWS::SQS::Queue
      DependsOn:
#          - TaskProcessingRole
          - taskDLQQueue
      Properties:
        QueueName: task-processing.fifo
        FifoQueue: true
        VisibilityTimeout: 60
        RedrivePolicy:
          maxReceiveCount: 2
          deadLetterTargetArn:
#            Fn::Join:
#                - ':'
#                - - arn
#                  - aws
#                  - sqs
#                  - Ref: AWS::Region #:eu-central-1
#                  - Ref: AWS::AccountId #::650979641201
#                  - taskDLQQueue
            Fn::GetAtt:
              - taskDLQQueue
              - Arn

    TaskGatewayRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: task-gateway-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: SQSSendMessage
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                    - sqs:GetQueueAttributes
                  Resource:
                    Fn::GetAtt:
                      - taskProcessingQueue
                      - Arn
          - PolicyName: TaskGatewayPolicyLogger
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvent
                    - logs:TagResources
                  Resource:
                    - Fn::Join:
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/taskGatewayLogs/*:*:*'

    TaskProcessingRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: task-processing-role
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: [lambda.amazonaws.com]
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: SQSProcessing
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes
                    - sqs:ChangeMessageVisibility
                  Resource:
                    Fn::GetAtt:
                      - taskProcessingQueue
                      - Arn
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                    - sqs:GetQueueAttributes
                  Resource:
                    Fn::GetAtt:
                      - taskDLQQueue
                      - Arn
          - PolicyName: TaskProcessingPolicyLogger
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvent
                    - logs:TagResources
                  Resource:
                    - Fn::Join:
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/taskProcessingLogs/*:*:*'

    TaskDLQRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: task-dlq-role
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: [lambda.amazonaws.com]
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: SQSTaskDLQ
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
#                    - sqs:SendMessage
                    - sqs:GetQueueAttributes
                    - sqs:DeleteMessage
                  Resource:
                      Fn::GetAtt:
                        - taskDLQQueue
                        - Arn
          - PolicyName: TaskDLQPolicyLogger
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvent
                    - logs:TagResources
                  Resource:
                    - Fn::Join:
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/taskDLQLogs/*:*:*'
package:
  individually: true
  exclude:
    - node_modules/**
    - git/**